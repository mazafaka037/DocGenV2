name: Build macOS .app

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: (Optional) Ensure brew present (no-op if present)
        run: |
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || true
          brew --version || true

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller==5.13.0

      - name: Run tests (optional)
        run: |
          echo "No tests configured"

      - name: Build .app with PyInstaller
        env:
          PYTHONWARNINGS: ignore
        run: |
          set -euo pipefail
          echo "Working dir: $PWD"
          echo "Top-level files:"
          ls -la .

          rm -rf build dist
          APP_NAME="DocGen"

          # Ensure main script exists
          if [ ! -f "./docgen_v2.py" ]; then
            echo "ERROR: docgen_v2.py not found in repo root!"
            find . -maxdepth 3 -print
            exit 1
          fi

          # Candidate resource files (adjust if you add new ones)
          CANDIDATES=(
            "template_permit.docx"
            "template_spisok.docx"
            "template_order.docx"
            "template_pb_order.docx"
            "templates.json"
            "defaults.json"
            "mapping.json"
            "settings.json"
            "counters.json"
            "workers.json"
            "collections.json"   # if missing, we'll create a placeholder below
          )

          # If collections.json is missing, create temporary placeholder
          if [ ! -f "collections.json" ]; then
            echo "collections.json not found â€” creating temporary placeholder so build won't fail."
            cat > collections.json <<'JSON'
{
  "collections": []
}
JSON
            # mark that we created it so we can delete after build if you want
            CREATED_PLACEHOLDER=1
          else
            CREATED_PLACEHOLDER=0
          fi

          # Build ADDDATA args only for existing files / directories
          ADDDATA_ARGS=()
          for F in "${CANDIDATES[@]}"; do
            if [ -e "${F}" ]; then
              echo "Including resource: ${F}"
              ADDDATA_ARGS+=("--add-data" "${F}:.")
            else
              echo "Not found, skipping resource: ${F}"
            fi
          done

          # Run PyInstaller (safe passing of args array)
          echo "Running PyInstaller..."
          pyinstaller --noconfirm --windowed --name "${APP_NAME}" --clean "${ADDDATA_ARGS[@]:-}" ./docgen_v2.py

          echo "PyInstaller finished. Inspecting dist/..."
          ls -la dist || true

          APP_PATH="dist/${APP_NAME}.app"
          if [ -d "${APP_PATH}" ]; then
            echo "App produced: ${APP_PATH}"
            echo "Contents of Resources:"
            ls -la "${APP_PATH}/Contents/Resources" || true
            echo "Main executable info:"
            file "${APP_PATH}/Contents/MacOS/${APP_NAME}" || true
          else
            echo "ERROR: expected ${APP_PATH} but it was not produced"
            ls -la dist || true
            exit 1
          fi

          # If we created a placeholder collections.json, optionally remove it from workspace
          if [ "${CREATED_PLACEHOLDER}" = "1" ]; then
            echo "Removing temporary collections.json created for build."
            rm -f collections.json
          fi

      - name: Package .app into zip (preserve mac resource forks)
        run: |
          APP_NAME="DocGen"
          APP_PATH="dist/${APP_NAME}.app"
          mkdir -p out
          if [ -d "${APP_PATH}" ]; then
            ditto -c -k --sequesterRsrc --keepParent "${APP_PATH}" "out/${APP_NAME}-macos.zip"
            ls -l out
          else
            echo "ERROR: ${APP_PATH} not found, cannot produce zip."
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: DocGen-macos
          path: out/*.zip

